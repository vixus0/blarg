#!/usr/bin/env python

from markdown import markdown
from jinja2 import Environment, FileSystemLoader
from datetime import datetime
from shutil import copy
import os, string, sys

if len(sys.argv) < 2:
    print('Specify output directory.')
    sys.exit(1)

out_dir = sys.argv[1]
posts_dir = './posts'
pages_dir = './pages'
static_dir = './static'
jinja = Environment(trim_blocks=True, loader=FileSystemLoader('templates'))
main_template = jinja.get_template('index.html')
arch_template = jinja.get_template('archive.html')

def clean(s):
    return ''.join(filter(lambda c: c in string.printable, s))

def hy(s):
    return '-'.join([clean(w.lower()) for w in s.split()])

def md(s):
    return markdown(s, extensions = [
        'markdown.extensions.extra',
        'markdown.extensions.codehilite',
        'markdown.extensions.nl2br',
        'markdown.extensions.sane_lists',
        ])

def parse_date(s):
    f_d = '%d-%m-%Y'
    f_hr = '%H:%M'
    ss = s.split()

    try:
        if len(ss) > 1:
            d = datetime.strptime(s, f_d+' '+f_hr)
        else:
            d = datetime.strptime(s, f_d)
    except:
        d = None
    return d

def render_out(template, path, **kw):
    s = template.render(**kw)
    with open(path, 'w') as f:
        f.write(s)

class ListDict(object):
    def __init__(self):
        self.d = {}

    def keys(self):
        return self.d.keys()

    def __getitem__(self, key):
        if key not in self.d:
            return None
        return self.d[key]

    def __setitem__(self, key, val):
        '''Appends'''
        if key not in self.d:
            self.d[key] = []
        self.d[key].append(val)


class Blog(object):
    def __init__(self):
        self.posts = []
        self.pages = []
        self.tags = ListDict()
        self.dates = ListDict()
        self.years = ListDict()
        self.months = ListDict()

    def add_post(self, post):
        self.posts.append(post)

        for tag in post.tags:
            self.tags[tag] = post

        date = post.date.strftime('%Y/%m/%d')
        month = post.date.strftime('%Y/%m')
        year = post.date.strftime('%Y')

        self.dates[date] = post
        self.months[month] = post
        self.years[year] = post

    def add_page(self, page):
        self.pages.append(page)

    def render(self):
        def postify(post, prev=None, next=None):
            tags = []
            for t in post.tags:
                tags.append({'href':'tags.html#'+t, 'name':t})

            date = post.date.strftime('%d %b %Y @ %H:%M')

            if prev:
                prev = {'href':prev.href, 'title':prev.title}

            if next:
                next = {'href':next.href, 'title':next.title}

            return {'date':date, 'tags':tags, 'prev':prev, 'next':next}

        # Sort posts by date
        self.posts.sort(key=lambda p: p.date)
        self.pages.sort(key=lambda p: p.title)

        # Main links
        site_nav = [
                {'href':'archive.html', 'title':'archive'},
                {'href':'tags.html', 'title':'tags'}
                ]

        for page in self.pages:
            site_nav.append({'href':page.href, 'title':page.title})

        # Render pages
        for page in self.pages:
            path = os.path.join(out_dir, page.href)
            render_out(main_template, path,
                    title = page.title,
                    site_nav = site_nav,
                    text = page.text
                    )

        # Render posts
        for i, post in enumerate(self.posts):
            prev_post = None
            next_post = None

            if i > 0:
                prev_post = self.posts[i-1]

            if i < len(self.posts) - 1:
                next_post = self.posts[i+1]

            path = os.path.join(out_dir, post.href)

            render_out(main_template, path,
                    title = post.title,
                    site_nav = site_nav,
                    post = postify(post, prev=prev_post, next=next_post),
                    text = post.text
                    )

            if not next_post:
                # Must be the last one guvnor
                # So point our index to the post
                index_path = os.path.join(out_dir, 'index.html')
                if os.path.exists(index_path):
                    os.remove(index_path)
                os.symlink(post.href, index_path)

        # Generate archives
        render_out(arch_template, os.path.join(out_dir, 'archive.html'),
                title = 'post archive',
                site_nav = site_nav,
                years = self.years,
                syears = sorted(self.years.keys())
                )

        # Generate tag pages
        render_out(arch_template, os.path.join(out_dir, 'tags.html'),
                title = 'post tags',
                site_nav = site_nav,
                years = self.tags,
                syears = sorted(self.tags.keys())
                )


class Post(object):
    def __init__(self, path, page=False):
        '''Create a Post object from a file.'''
        real = []
        meta = {}

        with open(path) as f:
            lines = f.readlines()

            for l in lines:
                if l.startswith('@'):
                    # Metadata
                    m = [x.strip() for x in l.split(':')]

                    if len(m) > 1:
                        meta[m[0]] = m[1]
                else:
                    real.append(l)

        ext = path.rsplit('.', 1)[-1]

        if ext == 'md':
            self.text = md('\n'.join(real[1:]))
        else:
            self.text = '\n'.join(real[1:])

        self.date = None

        if '@date' in meta:
            self.date = parse_date(meta['@date'])

        if not self.date:
            ts = os.path.getmtime(path)
            self.date = datetime.fromtimestamp(ts)

        if '@tags' in meta:
            self.tags = meta['@tags'].split()

        self.title = real[0].strip('#').strip()
        self.slug = hy(self.title)

        if page:
            self.href = self.slug + '.html'
        else:
            self.href = '{}-{}.html'.format(
                    self.date.strftime('%Y%m%d'),
                    self.slug
                    )


# Traverse posts and pages
posts = os.listdir(posts_dir)
pages = os.listdir(pages_dir)

blog = Blog()

if posts:
    for p_file in posts:
        post = Post(os.path.join(posts_dir, p_file))
        blog.add_post(post)

if pages:
    for p_file in pages:
        page = Post(os.path.join(pages_dir, p_file), page=True)
        blog.add_page(page)

# Do the thang
blog.render()

# Copy static stuff
if not os.path.exists(os.path.join(out_dir, 'static')):
    os.mkdir(os.path.join(out_dir, 'static'))

for fname in os.listdir(static_dir):
    static_src = os.path.join(static_dir, fname)
    static_dst = os.path.join(out_dir, 'static', fname)
    copy(static_src, static_dst)
